# -*- coding: utf-8 -*-
"""DC_autoencoder.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f_FlWOVx1f3YHCYUe7hLWBlb2bws2H6S
"""

from keras.datasets import mnist
from keras.models import Model
from keras.layers import Conv2D, MaxPool2D, UpSampling2D , Input


import cv2
import os
import numpy as np

import tensorflow as tf
devices = tf.config.experimental.get_visible_devices('GPU')
tf.config.experimental.set_memory_growth(device=devices[0],enable= True)

##dataset from keras

(x_train, y_train),(x_test, y_test) = mnist.load_data()

x_train.shape

import matplotlib.pyplot as plt
plt.imshow(x_train[0])

x_train = x_train/255.0
x_test = x_test/255.0

x_train = x_train.reshape(x_train.shape[0],28,28,1)
x_test = x_test.reshape(x_test.shape[0],28,28,1)
x_train.shape

##Model

input_layer = Input(shape=(28,28,1))

#encoder

x = Conv2D(16,(3,3),activation='relu',padding='same')(input_layer)
x = MaxPool2D(pool_size=(2,2),padding='same')(x)
x = Conv2D(8,(3,3),activation='relu',padding='same')(x)
x = MaxPool2D(pool_size=(2,2),padding='same')(x)
x = Conv2D(8,(3,3),activation='relu',padding='same')(x)
encoded = MaxPool2D(pool_size=(2,2),padding='same')(x)

#decoder

x= Conv2D(8,(3,3),activation='relu',padding='same')(encoded)
x=UpSampling2D((2,2))(x)
x= Conv2D(8,(3,3),activation='relu',padding='same')(x)
x=UpSampling2D((2,2))(x)
x= Conv2D(16,(3,3),activation='relu')(x)
x=UpSampling2D((2,2))(x)
decoded= Conv2D(1,(3,3),activation='relu',padding='same')(x)

autoencoder=Model(input_layer,decoded)
autoencoder.summary()

#compile

autoencoder.compile(loss='binary_crossentropy',optimizer='adam')

history=autoencoder.fit(x_train,x_train,epochs=60,batch_size=128,validation_data=(x_test,x_test))

autoencoder.summary()

encoder= Model(input_layer,encoded)
encoder.summary()

decoder_layer = Input(shape=(4,4,8))

decoder = autoencoder.layers[7](decoder_layer)

for layer in autoencoder.layers[8:] :
     decoder=layer(decoder)
decoder= Model(decoder_layer,decoder,name='Decoder')
decoder.summary()

encoded_images = encoder.predict(x_test,verbose=1)
encoded_images.shape

decoded_images = decoder.predict(encoded_images,verbose=1)
decoded_images.shape

decoded_images = decoded_images.reshape(decoded_images.shape[0],28,28)
decoded_images.shape

plt.imshow(decoded_images[7],cmap='gray')

plt.imshow(x_test[7],cmap='gray')

